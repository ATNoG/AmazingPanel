$.extend({
  uniformize: function(p){
      if (p){
        $("select, textarea, input:password, input:text, input:checkbox, input:radio, input:file", $(p)).uniform(); 
      } else {
        $("select, textarea, input:password, input:text, input:checkbox, input:radio, input:file").uniform(); 
      }
  },
  init: function(){
    $("a, .action, .has-tooltip").tipsy({ live: true, fade:true });
    $(".flash-msg-integrated").slideDown(500).delay(5000).slideUp(200);    
    //this.uniformize();
  }
  });

<% if user_signed_in? %>
$(document).ready(function(){
  $.init();
  var descs = $("div.description"), sep = 50;
  for (i=0;i<descs.length; ++i){
    var text = $(descs[i]).html();
    if (text.length > sep){
      text = text.slice(0,sep);
      $(descs[i]).html(text+"(...)");
    }
  }
  if ($(".tabs").length > 0) {      
      $(".tab").hide();
      $(".tab:eq(0)").show();
      $(".tabs li:first-child").addClass("tab-active");
      $(".tabs:not(#modal-tabs) li").live('click', function(evt){        
        var active_tab = $($(this).find("a").attr("href"));
        $(".tab").hide();
        $(".tabs li").removeClass("tab-active");
        $(this).addClass("tab-active");
        active_tab.fadeIn();
    	active_tab.focus();
        return false;
      });
  }
  <% if (@c == "projects" and @a == "assign")%>
    <%= render :partial => 'projects' %>
  <% end %>

  <% if (@c == "library/eds") %>
    <% if (@a == "show" or @a =="edit") %>
      <%= render :partial => 'library' %>
    <% end %>
  <% end %>

  <% if (@c == "library/sys_images") and (@a == "edit" or @a == "new")%>
    <% params.merge!(Rails.application.routes.recognize_path(params[:p])) %>
    $("#sys_image_edit").submit(function(){
      var target = "<%= sys_image_path(:id=>params[:id]) %>";
      var data = $("#sys_image_edit").serialize();
      $.post(target, data, function(data, statusCode, req){             
          if (!upload_sys_image()) {
            window.location.href = "<%= sys_image_path(params[:id]) %>";
          }
        }
      );
      return false;
    });
  <% end %>

  <% if (((@c == "testbeds") or (@c == "admin/testbeds")) and (@a == "show")) %>
    <%= render :partial => 'network' %>
  <% end %>

  <% if (@c == "experiments") %>
    <%= render :partial => 'experiments' %>    
  <% end %>
});

function rgb_color(d){
  var _A   = 0.16667;
  var _B   = 0.33333;
  var _C   = 0.66667;
  var _D   = 0.83333;

  if (d<=0 || d>1) {
    return -1;
  }
  var r=1,g=1,b=1;

  if (d<_A) {
    g = d/_A;
    b = 0;
  }
  else if (d<_B) {
    r = 1 - ((d-_A)/_A) ;
    b = 0;
  }
  else if (d<0.5) {
    r = 0;
    b = (d-_B)/_A;
  }
  else if (d<_C) {
    r = 0;
    g = 1 - ((d-0.5)/_A);
  }
  else if (d<_D) {
    r = (d-_C)/_A;
    g = 0;
  }
  else {
    b = 1 - ((d-_D)/_A)
    g = 0;
  }
  r = (r*255) | 0
  g = (g*255) | 0
  b = (b*255) | 0
  return "rgb("+r+","+g+","+b+")";
}

function closeDialog(selector){
  var modal = $(selector);
  var titlebox = $(selector+" > .title-box");
  var container = $(selector+" > .modal-container");  
  var actions = $(selector+" > .modal-actions");
  modal.removeClass("dialog-active");
  modal.attr("class", "modal").removeAttr("style");
  titlebox.attr("class", "title-box").removeAttr("style").html("");
  container.attr("class", "modal-container").removeAttr("style").html("");
  actions.attr("class", "modal-actions").removeAttr("style");

}

function setIntegerComparatorFilterExpression(path, id){
  var filter = $("#"+id+"-filter > .modal-container > .filter > .option ");
  var op = $("> #op > option:selected", filter).attr("value")
  var value = $(" > #value > option:selected", filter).attr("value")
  var anchor = $(" > .button > #apply-filter", filter)
  anchor.attr("href", filter_path(path, id, op, value))
}

function setStringComparatorFilterExpression(path, id){
  var filter = $("#"+id+"-filter > .modal-container > .filter > .option ");
  var op = $("> #op > option:selected", filter).attr("value")
  var value = $(" > #value", filter).attr("value")
  var anchor = $(" > .button > #apply-filter", filter)
  anchor.attr("href", filter_path(path, id, op, '\"'+value+'\"'))
}

function filter_path(path, field, cmp, value){
  return path+"?filter=field&field="+field+"&op="+cmp+"&value="+value;
}


  <% if (@c == "library/sys_images") and (@a == "edit" or @a == "new")%>
function AJAXUploadSupport(){
    return supportFileAPI() && supportAjaxUploadProgressEvents();

    function supportFileAPI() {
        var fi = document.createElement('INPUT');
        fi.type = 'file';
        return 'files' in fi;
    };

    function supportAjaxUploadProgressEvents() {
        var xhr = new XMLHttpRequest();
        return !! (xhr && ('upload' in xhr) && ('onprogress' in xhr.upload));
    };

}
function upload_sys_image(){      
  var fileInput = document.getElementById('file');
  var file = fileInput.files[0];
  if (file == undefined){
    return false;
  }
  var xhr = new XMLHttpRequest();
  file.name = "file";
  xhr.upload.addEventListener('progress', onprogressHandler, false);
  xhr.upload.addEventListener('load', onloadHandler, false);
  xhr.open('POST', "<%= image_sys_image_path(:id => params[:id]) %>", true);
  xhr.setRequestHeader("Content-Type", "application/octet-stream");
  xhr.setRequestHeader("X-File-Name", file.name);
  xhr.send(file);
  return true;
}

function onprogressHandler(evt){
  var percent = evt.loaded/evt.total*100;
  $("#image-progress-text").html(percent);
  $("#image-progress-bar").css("width", percent+"%");
}   

function onloadHandler(evt) {
  window.location.href = "<%= sys_image_path(params[:id]) %>";
} 
  <% end %>

  <% if ((@c == "testbeds") or (@c == "admin/testbeds")) and (@a == "show")%>
function updateStatus() { 
  var testbed = $('.testbed')
  var timestamp = testbed.attr("timestamp");
  var id = testbed.attr('id').replace(/testbed-/, "");
  $.getScript('/testbeds/'+id+'.js?timestamp='+timestamp);  
  setTimeout(updateStatus, 60000);  
}
  <% end %>

<% end %>                           
